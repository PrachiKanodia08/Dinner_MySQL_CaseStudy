CREATE DATABASE dannydinner;

USE dannydinner;
 
DROP TABLE IF EXISTS sales;
DROP TABLE IF EXISTS menu;
DROP TABLE IF EXISTS members;


CREATE TABLE sales (
  customer_id VARCHAR(1), 
  order_date DATE, 
  product_id INTEGER
);

INSERT INTO sales (
  customer_id, order_date, product_id
) 
VALUES 
  ('A', '2021-01-01', '1'), 
  ('A', '2021-01-01', '2'), 
  ('A', '2021-01-07', '2'), 
  ('A', '2021-01-10', '3'), 
  ('A', '2021-01-11', '3'), 
  ('A', '2021-01-11', '3'), 
  ('B', '2021-01-01', '2'), 
  ('B', '2021-01-02', '2'), 
  ('B', '2021-01-04', '1'), 
  ('B', '2021-01-11', '1'), 
  ('B', '2021-01-16', '3'), 
  ('B', '2021-02-01', '3'), 
  ('C', '2021-01-01', '3'), 
  ('C', '2021-01-01', '3'), 
  ('C', '2021-01-07', '3');
  
  CREATE TABLE menu (
  product_id INTEGER, 
  product_name VARCHAR(5), 
  price INTEGER
);

INSERT INTO menu (product_id, product_name, price) 
VALUES 
  (1, 'sushi', 10), 
  (2, 'curry', 15), 
  (3, 'ramen', 12);
  
CREATE TABLE members (
  customer_id VARCHAR(1), 
  join_date DATE
);

INSERT INTO members (customer_id, join_date) 
VALUES 
  ('A', '2021-01-07'), 
  ('B', '2021-01-09');
  

select * from members;
select * from menu;
select * from sales;

/* Questions */

-- 1. What is the total amount each customer spent at the restaurant?
SELECT S.CUSTOMER_ID, SUM(M.PRICE) AS AMOUNT_SPENT 
FROM SALES AS S
INNER JOIN MENU AS M
ON S.PRODUCT_ID = M.PRODUCT_ID
GROUP BY S.CUSTOMER_ID;


-- 2. How many days has each customer visited the restaurant?
SELECT CUSTOMER_ID, COUNT(DISTINCT ORDER_DATE) AS VISIT_COUNT
FROM SALES
GROUP BY CUSTOMER_ID;


-- 3. What was the first item from the menu purchased by each customer?
WITH ITEM_PURCHASED AS
(
SELECT CUSTOMER_ID, 
	   ORDER_DATE,
	   PRODUCT_NAME,
	   DENSE_RANK() OVER(PARTITION BY CUSTOMER_ID ORDER BY ORDER_DATE) AS ROW_RANK
 FROM SALES AS S
 INNER JOIN MENU AS M
 ON S.PRODUCT_ID = M.PRODUCT_ID
 ) 
 SELECT CUSTOMER_ID, GROUP_CONCAT(DISTINCT PRODUCT_NAME) AS PRODUCTS FROM ITEM_PURCHASED
 WHERE ROW_RANK = 1
 GROUP BY CUSTOMER_ID;


-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
SELECT M.PRODUCT_NAME,
       COUNT(S.PRODUCT_ID) AS PRODUCT_COUNT
 FROM SALES AS S
 INNER JOIN MENU AS M
 ON S.PRODUCT_ID = M.PRODUCT_ID
 GROUP BY M.PRODUCT_NAME
 ORDER BY PRODUCT_COUNT DESC
 LIMIT 1;


-- 5. Which item was the most popular for each customer?
WITH ORDER_INFO AS
(
SELECT  S.CUSTOMER_ID,
		M.PRODUCT_NAME,
		COUNT(S.PRODUCT_ID) AS PRODUCT_COUNT,
       DENSE_RANK() OVER(PARTITION BY S.CUSTOMER_ID ORDER BY COUNT(S.PRODUCT_ID) DESC) AS CUST_PROD_RANK
 FROM SALES AS S
 INNER JOIN MENU AS M
 ON S.PRODUCT_ID = M.PRODUCT_ID
 GROUP BY S.CUSTOMER_ID, M.PRODUCT_NAME
 )
 SELECT CUSTOMER_ID, PRODUCT_NAME, PRODUCT_COUNT FROM ORDER_INFO
 WHERE CUST_PROD_RANK = 1;


-- 6. Which item was purchased first by the customer after they became a member?
WITH ORDER_INFO AS
(
SELECT  
	S.CUSTOMER_ID, M.PRODUCT_NAME,
    DENSE_RANK() OVER(PARTITION BY S.CUSTOMER_ID ORDER BY S.ORDER_DATE) AS CUST_RANK
FROM SALES AS S
INNER JOIN MEMBERS AS MEM
ON S.CUSTOMER_ID = MEM.CUSTOMER_ID
INNER JOIN MENU AS M 
ON S.PRODUCT_ID = M.PRODUCT_ID
WHERE MEM.JOIN_DATE <= S.ORDER_DATE
)
SELECT CUSTOMER_ID, PRODUCT_NAME FROM ORDER_INFO
WHERE CUST_RANK = 1;


-- 7. Which item was purchased just before the customer became a member?
WITH ORDER_INFO AS
(
SELECT  
	S.CUSTOMER_ID, M.PRODUCT_NAME,
    DENSE_RANK() OVER(PARTITION BY S.CUSTOMER_ID ORDER BY S.ORDER_DATE) AS CUST_RANK
FROM SALES AS S
INNER JOIN MEMBERS AS MEM
ON S.CUSTOMER_ID = MEM.CUSTOMER_ID
INNER JOIN MENU AS M 
ON S.PRODUCT_ID = M.PRODUCT_ID
WHERE MEM.JOIN_DATE > S.ORDER_DATE
)
SELECT CUSTOMER_ID, PRODUCT_NAME FROM ORDER_INFO
WHERE CUST_RANK = 1;


-- 8. What is the total items and amount spent for each member before they became a member?
SELECT  
	S.CUSTOMER_ID,
    COUNT(M.PRODUCT_ID) AS TOTAL_ITEMS,
    CONCAT('$ ',SUM(M.PRICE)) AS TOTAL_AMT
FROM SALES AS S
INNER JOIN MEMBERS AS MEM
ON S.CUSTOMER_ID = MEM.CUSTOMER_ID
INNER JOIN MENU AS M 
ON S.PRODUCT_ID = M.PRODUCT_ID
WHERE MEM.JOIN_DATE > S.ORDER_DATE
GROUP BY S.CUSTOMER_ID;


-- 9. If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
WITH POINTS_INFO AS
(
SELECT S.CUSTOMER_ID, M.PRODUCT_ID, M.PRODUCT_NAME,
	CASE 
		WHEN PRODUCT_NAME = 'SUSHI' THEN M.PRICE*20
        ELSE M.PRICE*10
    END AS points
FROM SALES AS S
INNER JOIN MENU AS M
ON S.PRODUCT_ID = M.PRODUCT_ID
) SELECT CUSTOMER_ID,
		 SUM(POINTS) AS TOTAL_POINTS
FROM POINTS_INFO
GROUP BY CUSTOMER_ID;



